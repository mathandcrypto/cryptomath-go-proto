// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error)
	FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*FindByEmailResponse, error)
	FindByEmailAndPassword(ctx context.Context, in *FindByEmailAndPasswordRequest, opts ...grpc.CallOption) (*FindByEmailAndPasswordResponse, error)
	FindFromList(ctx context.Context, in *FindFromListRequest, opts ...grpc.CallOption) (*FindFromListResponse, error)
	FindAvatar(ctx context.Context, in *FindAvatarRequest, opts ...grpc.CallOption) (*FindAvatarResponse, error)
	CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error)
	DeleteAvatar(ctx context.Context, in *DeleteAvatarRequest, opts ...grpc.CallOption) (*DeleteAvatarResponse, error)
	FindProfile(ctx context.Context, in *FindProfileRequest, opts ...grpc.CallOption) (*FindProfileResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error) {
	out := new(FindOneResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*FindByEmailResponse, error) {
	out := new(FindByEmailResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindByEmailAndPassword(ctx context.Context, in *FindByEmailAndPasswordRequest, opts ...grpc.CallOption) (*FindByEmailAndPasswordResponse, error) {
	out := new(FindByEmailAndPasswordResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findByEmailAndPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindFromList(ctx context.Context, in *FindFromListRequest, opts ...grpc.CallOption) (*FindFromListResponse, error) {
	out := new(FindFromListResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindAvatar(ctx context.Context, in *FindAvatarRequest, opts ...grpc.CallOption) (*FindAvatarResponse, error) {
	out := new(FindAvatarResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error) {
	out := new(CreateAvatarResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/createAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAvatar(ctx context.Context, in *DeleteAvatarRequest, opts ...grpc.CallOption) (*DeleteAvatarResponse, error) {
	out := new(DeleteAvatarResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/deleteAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindProfile(ctx context.Context, in *FindProfileRequest, opts ...grpc.CallOption) (*FindProfileResponse, error) {
	out := new(FindProfileResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/findProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error)
	FindByEmail(context.Context, *FindByEmailRequest) (*FindByEmailResponse, error)
	FindByEmailAndPassword(context.Context, *FindByEmailAndPasswordRequest) (*FindByEmailAndPasswordResponse, error)
	FindFromList(context.Context, *FindFromListRequest) (*FindFromListResponse, error)
	FindAvatar(context.Context, *FindAvatarRequest) (*FindAvatarResponse, error)
	CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error)
	DeleteAvatar(context.Context, *DeleteAvatarRequest) (*DeleteAvatarResponse, error)
	FindProfile(context.Context, *FindProfileRequest) (*FindProfileResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedUserServiceServer) FindByEmail(context.Context, *FindByEmailRequest) (*FindByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEmail not implemented")
}
func (UnimplementedUserServiceServer) FindByEmailAndPassword(context.Context, *FindByEmailAndPasswordRequest) (*FindByEmailAndPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEmailAndPassword not implemented")
}
func (UnimplementedUserServiceServer) FindFromList(context.Context, *FindFromListRequest) (*FindFromListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFromList not implemented")
}
func (UnimplementedUserServiceServer) FindAvatar(context.Context, *FindAvatarRequest) (*FindAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvatar not implemented")
}
func (UnimplementedUserServiceServer) CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedUserServiceServer) DeleteAvatar(context.Context, *DeleteAvatarRequest) (*DeleteAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAvatar not implemented")
}
func (UnimplementedUserServiceServer) FindProfile(context.Context, *FindProfileRequest) (*FindProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProfile not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/createUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOne(ctx, req.(*FindOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindByEmail(ctx, req.(*FindByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindByEmailAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEmailAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindByEmailAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findByEmailAndPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindByEmailAndPassword(ctx, req.(*FindByEmailAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFromListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindFromList(ctx, req.(*FindFromListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindAvatar(ctx, req.(*FindAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/createAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAvatar(ctx, req.(*CreateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/deleteAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAvatar(ctx, req.(*DeleteAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/findProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindProfile(ctx, req.(*FindProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "findOne",
			Handler:    _UserService_FindOne_Handler,
		},
		{
			MethodName: "findByEmail",
			Handler:    _UserService_FindByEmail_Handler,
		},
		{
			MethodName: "findByEmailAndPassword",
			Handler:    _UserService_FindByEmailAndPassword_Handler,
		},
		{
			MethodName: "findFromList",
			Handler:    _UserService_FindFromList_Handler,
		},
		{
			MethodName: "findAvatar",
			Handler:    _UserService_FindAvatar_Handler,
		},
		{
			MethodName: "createAvatar",
			Handler:    _UserService_CreateAvatar_Handler,
		},
		{
			MethodName: "deleteAvatar",
			Handler:    _UserService_DeleteAvatar_Handler,
		},
		{
			MethodName: "findProfile",
			Handler:    _UserService_FindProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
