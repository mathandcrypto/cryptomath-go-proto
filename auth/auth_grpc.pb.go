// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	CreateAccessSession(ctx context.Context, in *CreateAccessSessionRequest, opts ...grpc.CallOption) (*CreateAccessSessionResponse, error)
	ValidateAccessSession(ctx context.Context, in *ValidateAccessSessionRequest, opts ...grpc.CallOption) (*ValidateAccessSessionResponse, error)
	DeleteAccessSession(ctx context.Context, in *DeleteAccessSessionRequest, opts ...grpc.CallOption) (*DeleteAccessSessionResponse, error)
	ValidateRefreshSession(ctx context.Context, in *ValidateRefreshSessionRequest, opts ...grpc.CallOption) (*ValidateRefreshSessionResponse, error)
	DeleteRefreshSession(ctx context.Context, in *DeleteRefreshSessionRequest, opts ...grpc.CallOption) (*DeleteRefreshSessionResponse, error)
	DeleteAllUserSessions(ctx context.Context, in *DeleteAllUserSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) CreateAccessSession(ctx context.Context, in *CreateAccessSessionRequest, opts ...grpc.CallOption) (*CreateAccessSessionResponse, error) {
	out := new(CreateAccessSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/createAccessSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateAccessSession(ctx context.Context, in *ValidateAccessSessionRequest, opts ...grpc.CallOption) (*ValidateAccessSessionResponse, error) {
	out := new(ValidateAccessSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/validateAccessSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAccessSession(ctx context.Context, in *DeleteAccessSessionRequest, opts ...grpc.CallOption) (*DeleteAccessSessionResponse, error) {
	out := new(DeleteAccessSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/deleteAccessSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateRefreshSession(ctx context.Context, in *ValidateRefreshSessionRequest, opts ...grpc.CallOption) (*ValidateRefreshSessionResponse, error) {
	out := new(ValidateRefreshSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/validateRefreshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteRefreshSession(ctx context.Context, in *DeleteRefreshSessionRequest, opts ...grpc.CallOption) (*DeleteRefreshSessionResponse, error) {
	out := new(DeleteRefreshSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/deleteRefreshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllUserSessions(ctx context.Context, in *DeleteAllUserSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/deleteAllUserSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	CreateAccessSession(context.Context, *CreateAccessSessionRequest) (*CreateAccessSessionResponse, error)
	ValidateAccessSession(context.Context, *ValidateAccessSessionRequest) (*ValidateAccessSessionResponse, error)
	DeleteAccessSession(context.Context, *DeleteAccessSessionRequest) (*DeleteAccessSessionResponse, error)
	ValidateRefreshSession(context.Context, *ValidateRefreshSessionRequest) (*ValidateRefreshSessionResponse, error)
	DeleteRefreshSession(context.Context, *DeleteRefreshSessionRequest) (*DeleteRefreshSessionResponse, error)
	DeleteAllUserSessions(context.Context, *DeleteAllUserSessionsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) CreateAccessSession(context.Context, *CreateAccessSessionRequest) (*CreateAccessSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessSession not implemented")
}
func (UnimplementedAuthServiceServer) ValidateAccessSession(context.Context, *ValidateAccessSessionRequest) (*ValidateAccessSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAccessSession(context.Context, *DeleteAccessSessionRequest) (*DeleteAccessSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessSession not implemented")
}
func (UnimplementedAuthServiceServer) ValidateRefreshSession(context.Context, *ValidateRefreshSessionRequest) (*ValidateRefreshSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRefreshSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteRefreshSession(context.Context, *DeleteRefreshSessionRequest) (*DeleteRefreshSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRefreshSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllUserSessions(context.Context, *DeleteAllUserSessionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllUserSessions not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_CreateAccessSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAccessSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/createAccessSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAccessSession(ctx, req.(*CreateAccessSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateAccessSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccessSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateAccessSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/validateAccessSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateAccessSession(ctx, req.(*ValidateAccessSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAccessSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAccessSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/deleteAccessSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAccessSession(ctx, req.(*DeleteAccessSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateRefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRefreshSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateRefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/validateRefreshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateRefreshSession(ctx, req.(*ValidateRefreshSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteRefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRefreshSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteRefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/deleteRefreshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteRefreshSession(ctx, req.(*DeleteRefreshSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/deleteAllUserSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllUserSessions(ctx, req.(*DeleteAllUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAccessSession",
			Handler:    _AuthService_CreateAccessSession_Handler,
		},
		{
			MethodName: "validateAccessSession",
			Handler:    _AuthService_ValidateAccessSession_Handler,
		},
		{
			MethodName: "deleteAccessSession",
			Handler:    _AuthService_DeleteAccessSession_Handler,
		},
		{
			MethodName: "validateRefreshSession",
			Handler:    _AuthService_ValidateRefreshSession_Handler,
		},
		{
			MethodName: "deleteRefreshSession",
			Handler:    _AuthService_DeleteRefreshSession_Handler,
		},
		{
			MethodName: "deleteAllUserSessions",
			Handler:    _AuthService_DeleteAllUserSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
